package com.bshara.cryptoserver.Utils.Entities;

import java.util.TreeMap;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

public class Main {
	

	public static void main(String[] args) throws Exception {
		TreeMap<String, Object> params = new TreeMap<String, Object>();
		params.put("userid", "152255855");
		params.put("phone", "18965621420");

		client(params);

		server();
	}

	public static void client(TreeMap<String, Object> params) throws Exception {
		// Generate RSA signature
		String sign = EncryUtil.handleRSA(params, DummyKeys.clientPrivateKey);
		params.put("sign", sign);

		String info = JSON.toJSONString(params);
		
		// Randomly generate AES key
		String aesKey = SecureRandomUtil.getRandom(16);
		
		// AES encrypted data
		String data = AES.encryptToBase64(ConvertUtils.stringToHexString(info), aesKey);

		// Use the RSA algorithm to encrypt the AESkey randomly generated by the client
		String encryptkey = RSA.encrypt(aesKey, DummyKeys.serverPublicKey);

		Req.data = data;
		Req.encryptkey = encryptkey;

		System.out.println("Encrypted request data:\n" + new Req().toString());
	}

	public static void server() throws Exception {

		// Verify
		boolean passSign = EncryUtil.checkDecryptAndSign(Req.data, Req.encryptkey, DummyKeys.clientPublicKey, DummyKeys.serverPrivateKey);

		// Pass the verification
		if (passSign) {

			String aeskey = RSA.decrypt(Req.encryptkey, DummyKeys.serverPrivateKey);
			String data = ConvertUtils.hexStringToString(AES.decryptFromBase64(Req.data, aeskey));

			JSONObject jsonObj = JSONObject.parseObject(data);
			String userid = jsonObj.getString("userid");
			String phone = jsonObj.getString("phone");

			System.out.println("Decrypted plaintext: userid:" + userid + " phone:" + phone);

		} else {
			System.out.println("Signature verification failed");
		}
	}

	static class Req {
		public static String data;
		public static String encryptkey;

		@Override
		public String toString() {
			return "data:" + data + "\nencryptkey:" + encryptkey;
		}
	}
}